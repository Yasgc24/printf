.\" Automatically generated by Pandoc 2.5
.\"
.TH "" "" "" "" ""
.hy
.SH NAME
.PP
_printf
.SH SYNOPSIS
.PP
\f[B]printf\f[R]
.SH DESCRIPTION
.PP
\f[B]printf\f[R] \[lq]printf\[rq] is the name of one of the main C
output functions, and stands for \[lq]printformatted\[rq].
printf format strings are complementary to scanf format strings, which
provide formatted input (parsing).
In the most simple case, printf takes one argument: a string of
characters to be printed.
This string is composed of characters, each of which is printed exactly
as it appears.
So printf(\[lq]xyz\[rq]); would simply print an x, then a y, and finally
a z.
This is not exactly \[lq]formatted\[rq] printing, but it is still the
basis of what printf does.
.SH OPTIONS
.TP
.B \f[B]Format Specifications\f[R]
The real power of printf is when we are printing the contents of
variables.
Let\[cq]s take the format specifier %.
.PP
\f[B]formatters\f[R] \f[B]%c\f[R] : print a single character
.TP
.B \f[B]%d\f[R]
print a decimal (base 10) number
.TP
.B \f[B]%e\f[R]
print a exponential floating\-point number
.TP
.B \f[B]%f\f[R]
print a floating\-point number
.TP
.B \f[B]%g\f[R]
print a general\-format floating\-point number
.TP
.B \f[B]%i\f[R]
print a integer in base 10
.TP
.B \f[B]%o\f[R]
print a number octal (base 8)
.TP
.B \f[B]%s\f[R]
print a string of characters
.PP
\f[B]%u\f[R] print a unsigned decimal (base 10) number
.TP
.B \f[B]%x\f[R]
print a number in hexidecimal (base 16)
.TP
.B \f[B]%%\f[R]
print a percent sign (% also works)
.SH EXAMPLES
.TP
.B \f[B]printf (\[lq]hello world!\[rq])\f[R]
print hello world followed by a newline
.SH EXIT VALUES
.TP
.B \f[B]Return\f[R]
value to which the function returns
.SH SEE ALSO
.PP
   *   *   *   *   *
.SH AUTHORS
.PP
Leidy Yasmin Giraldo Casta\[~n]o Jhoan David Vargas Velandia
